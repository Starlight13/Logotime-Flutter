// Mocks generated by Mockito 5.3.2 from annotations
// in logotime/test/middleware/validation_middleware/validation_middleware_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:logotime/network/model/organisation/organisation_size.dart'
    as _i5;
import 'package:logotime/network/model/user/user_model.dart' as _i3;
import 'package:logotime/redux/action/registration/create_owner_action.dart'
    as _i8;
import 'package:logotime/redux/state/app/app_state.dart' as _i2;
import 'package:logotime/service/validation/validation_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:redux/src/store.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppState_0 extends _i1.SmartFake implements _i2.AppState {
  _FakeAppState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_1 extends _i1.SmartFake implements _i3.UserModel {
  _FakeUserModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIValidationService extends _i1.Mock
    implements _i4.IValidationService {
  @override
  bool isEmailValid({required String? email}) => (super.noSuchMethod(
        Invocation.method(
          #isEmailValid,
          [],
          {#email: email},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isPasswordValid({required String? password}) => (super.noSuchMethod(
        Invocation.method(
          #isPasswordValid,
          [],
          {#password: password},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isPhoneNumberValid({required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isPhoneNumberValid,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isFirstNameValid({required String? firstName}) => (super.noSuchMethod(
        Invocation.method(
          #isFirstNameValid,
          [],
          {#firstName: firstName},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isLastNameValid({required String? lastName}) => (super.noSuchMethod(
        Invocation.method(
          #isLastNameValid,
          [],
          {#lastName: lastName},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isOrganisationNameValid({required String? organisationName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isOrganisationNameValid,
          [],
          {#organisationName: organisationName},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isOrganisationSizeValid(
          {required _i5.OrganisationSize? organisationSize}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isOrganisationSizeValid,
          [],
          {#organisationSize: organisationSize},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isMaxApplicationsValid({required String? maxApplications}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMaxApplicationsValid,
          [],
          {#maxApplications: maxApplications},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isNotEmpty(
    String? string, {
    required String? fieldName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isNotEmpty,
          [string],
          {#fieldName: fieldName},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore extends _i1.Mock implements _i6.Store<_i2.AppState> {
  @override
  _i6.Reducer<_i2.AppState> get reducer => (super.noSuchMethod(
        Invocation.getter(#reducer),
        returnValue: (
          _i2.AppState state,
          dynamic action,
        ) =>
            _FakeAppState_0(
          this,
          Invocation.getter(#reducer),
        ),
        returnValueForMissingStub: (
          _i2.AppState state,
          dynamic action,
        ) =>
            _FakeAppState_0(
          this,
          Invocation.getter(#reducer),
        ),
      ) as _i6.Reducer<_i2.AppState>);
  @override
  set reducer(_i6.Reducer<_i2.AppState>? _reducer) => super.noSuchMethod(
        Invocation.setter(
          #reducer,
          _reducer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.AppState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAppState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAppState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AppState);
  @override
  _i7.Stream<_i2.AppState> get onChange => (super.noSuchMethod(
        Invocation.getter(#onChange),
        returnValue: _i7.Stream<_i2.AppState>.empty(),
        returnValueForMissingStub: _i7.Stream<_i2.AppState>.empty(),
      ) as _i7.Stream<_i2.AppState>);
  @override
  _i7.Future<dynamic> teardown() => (super.noSuchMethod(
        Invocation.method(
          #teardown,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
}

/// A class which mocks [OwnerInfoEnteredAction].
///
/// See the documentation for Mockito's code generation for more information.
class MockOwnerInfoEnteredAction extends _i1.Mock
    implements _i8.OwnerInfoEnteredAction {
  @override
  _i3.UserModel get ownerInfo => (super.noSuchMethod(
        Invocation.getter(#ownerInfo),
        returnValue: _FakeUserModel_1(
          this,
          Invocation.getter(#ownerInfo),
        ),
        returnValueForMissingStub: _FakeUserModel_1(
          this,
          Invocation.getter(#ownerInfo),
        ),
      ) as _i3.UserModel);
}
