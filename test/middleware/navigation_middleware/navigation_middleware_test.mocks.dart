// Mocks generated by Mockito 5.3.2 from annotations
// in logotime/test/middleware/navigation_middleware/navigation_middleware_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/widgets.dart' as _i3;
import 'package:logotime/redux/state/app/app_state.dart' as _i2;
import 'package:logotime/service/navigation/navigation_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:redux/src/store.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppState_0 extends _i1.SmartFake implements _i2.AppState {
  _FakeAppState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteSettings_1 extends _i1.SmartFake implements _i3.RouteSettings {
  _FakeRouteSettings_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueListenable_2<T> extends _i1.SmartFake
    implements _i4.ValueListenable<T> {
  _FakeValueListenable_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTickerFuture_3 extends _i1.SmartFake implements _i3.TickerFuture {
  _FakeTickerFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [INavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINavigationService extends _i1.Mock
    implements _i5.INavigationService {
  @override
  _i6.Future<bool> pop() => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  void popUntil(String? routeName) => super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [routeName],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pushNamed(String? routeName) => super.noSuchMethod(
        Invocation.method(
          #pushNamed,
          [routeName],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pushNamedAndRemoveUntil(
    String? routeName,
    bool Function(_i3.Route<dynamic>)? predicate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [
            routeName,
            predicate,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore extends _i1.Mock implements _i7.Store<_i2.AppState> {
  @override
  _i7.Reducer<_i2.AppState> get reducer => (super.noSuchMethod(
        Invocation.getter(#reducer),
        returnValue: (
          _i2.AppState state,
          dynamic action,
        ) =>
            _FakeAppState_0(
          this,
          Invocation.getter(#reducer),
        ),
        returnValueForMissingStub: (
          _i2.AppState state,
          dynamic action,
        ) =>
            _FakeAppState_0(
          this,
          Invocation.getter(#reducer),
        ),
      ) as _i7.Reducer<_i2.AppState>);
  @override
  set reducer(_i7.Reducer<_i2.AppState>? _reducer) => super.noSuchMethod(
        Invocation.setter(
          #reducer,
          _reducer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.AppState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAppState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAppState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AppState);
  @override
  _i6.Stream<_i2.AppState> get onChange => (super.noSuchMethod(
        Invocation.getter(#onChange),
        returnValue: _i6.Stream<_i2.AppState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i2.AppState>.empty(),
      ) as _i6.Stream<_i2.AppState>);
  @override
  _i6.Future<dynamic> teardown() => (super.noSuchMethod(
        Invocation.method(
          #teardown,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}

/// A class which mocks [Route].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoute extends _i1.Mock implements _i3.Route<dynamic> {
  @override
  _i3.RouteSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeRouteSettings_1(
          this,
          Invocation.getter(#settings),
        ),
        returnValueForMissingStub: _FakeRouteSettings_1(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i3.RouteSettings);
  @override
  _i4.ValueListenable<String?> get restorationScopeId => (super.noSuchMethod(
        Invocation.getter(#restorationScopeId),
        returnValue: _FakeValueListenable_2<String?>(
          this,
          Invocation.getter(#restorationScopeId),
        ),
        returnValueForMissingStub: _FakeValueListenable_2<String?>(
          this,
          Invocation.getter(#restorationScopeId),
        ),
      ) as _i4.ValueListenable<String?>);
  @override
  List<_i3.OverlayEntry> get overlayEntries => (super.noSuchMethod(
        Invocation.getter(#overlayEntries),
        returnValue: <_i3.OverlayEntry>[],
        returnValueForMissingStub: <_i3.OverlayEntry>[],
      ) as List<_i3.OverlayEntry>);
  @override
  bool get willHandlePopInternally => (super.noSuchMethod(
        Invocation.getter(#willHandlePopInternally),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<dynamic> get popped => (super.noSuchMethod(
        Invocation.getter(#popped),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  bool get isCurrent => (super.noSuchMethod(
        Invocation.getter(#isCurrent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isFirst => (super.noSuchMethod(
        Invocation.getter(#isFirst),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasActiveRouteBelow => (super.noSuchMethod(
        Invocation.getter(#hasActiveRouteBelow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void install() => super.noSuchMethod(
        Invocation.method(
          #install,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.TickerFuture didPush() => (super.noSuchMethod(
        Invocation.method(
          #didPush,
          [],
        ),
        returnValue: _FakeTickerFuture_3(
          this,
          Invocation.method(
            #didPush,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_3(
          this,
          Invocation.method(
            #didPush,
            [],
          ),
        ),
      ) as _i3.TickerFuture);
  @override
  void didAdd() => super.noSuchMethod(
        Invocation.method(
          #didAdd,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace(_i3.Route<dynamic>? oldRoute) => super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [oldRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i3.RoutePopDisposition> willPop() => (super.noSuchMethod(
        Invocation.method(
          #willPop,
          [],
        ),
        returnValue: _i6.Future<_i3.RoutePopDisposition>.value(
            _i3.RoutePopDisposition.pop),
        returnValueForMissingStub: _i6.Future<_i3.RoutePopDisposition>.value(
            _i3.RoutePopDisposition.pop),
      ) as _i6.Future<_i3.RoutePopDisposition>);
  @override
  bool didPop(dynamic result) => (super.noSuchMethod(
        Invocation.method(
          #didPop,
          [result],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void didComplete(dynamic result) => super.noSuchMethod(
        Invocation.method(
          #didComplete,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPopNext(_i3.Route<dynamic>? nextRoute) => super.noSuchMethod(
        Invocation.method(
          #didPopNext,
          [nextRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeNext(_i3.Route<dynamic>? nextRoute) => super.noSuchMethod(
        Invocation.method(
          #didChangeNext,
          [nextRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangePrevious(_i3.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangePrevious,
          [previousRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changedInternalState() => super.noSuchMethod(
        Invocation.method(
          #changedInternalState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changedExternalState() => super.noSuchMethod(
        Invocation.method(
          #changedExternalState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
